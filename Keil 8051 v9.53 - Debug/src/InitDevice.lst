C51 COMPILER V9.53.0.0   INITDEVICE                                                        06/07/2018 11:22:25 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src\InitDevice.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v3\developer\toolchains\keil_8051\9.53\BIN\C51.exe D:\VM\share\EFM8
                    -_PROJ\SONOFF-C1-EFM8\src\InitDevice.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,
                    -SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(D:/VM/share/EFM8_PROJ/SONOFF-C1-EFM8/inc;C:/SiliconLabs/Simpl
                    -icityStudio/v3/developer/sdks/si8051/v3//Device/shared/si8051Base;C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si80
                    -51/v3//Device/EFM8BB1;C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/EFM8BB1/inc) PRINT(.\src\InitD
                    -evice.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\InitDevice.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8BB1_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          // USER PROTOTYPES
  14          // USER FUNCTIONS
  15          
  16          
  17          // $[Library Includes]
  18          // [Library Includes]$
  19          
  20          //==============================================================================
  21          // enter_DefaultMode_from_RESET
  22          //==============================================================================
  23          extern void enter_DefaultMode_from_RESET(void) {
  24   1              // $[Config Calls]
  25   1              WDT_0_enter_DefaultMode_from_RESET();
  26   1              PORTS_0_enter_DefaultMode_from_RESET();
  27   1              PORTS_1_enter_DefaultMode_from_RESET();
  28   1              PBCFG_0_enter_DefaultMode_from_RESET();
  29   1              LFOSC_0_enter_DefaultMode_from_RESET();
  30   1              CLOCK_0_enter_DefaultMode_from_RESET();
  31   1              TIMER01_0_enter_DefaultMode_from_RESET();
  32   1              TIMER16_2_enter_DefaultMode_from_RESET();
  33   1              TIMER16_3_enter_DefaultMode_from_RESET();
  34   1              TIMER_SETUP_0_enter_DefaultMode_from_RESET();
  35   1              PCA_0_enter_DefaultMode_from_RESET();
  36   1              PCACH_0_enter_DefaultMode_from_RESET();
  37   1              INTERRUPT_0_enter_DefaultMode_from_RESET();
  38   1              // [Config Calls]$
  39   1      
  40   1      
  41   1      }
  42          
  43          
  44          //================================================================================
  45          // WDT_0_enter_DefaultMode_from_RESET
  46          //================================================================================
  47          extern void WDT_0_enter_DefaultMode_from_RESET(void) {
  48   1              // $[WDTCN - Watchdog Timer Control]
  49   1              //Disable Watchdog with key sequence
  50   1              WDTCN = 0xDE; //First key
  51   1              WDTCN = 0xAD; //Second key
C51 COMPILER V9.53.0.0   INITDEVICE                                                        06/07/2018 11:22:25 PAGE 2   

  52   1              // [WDTCN - Watchdog Timer Control]$
  53   1      
  54   1      
  55   1      }
  56          
  57          //================================================================================
  58          // PORTS_0_enter_DefaultMode_from_RESET
  59          //================================================================================
  60          extern void PORTS_0_enter_DefaultMode_from_RESET(void) {
  61   1              // $[P0 - Port 0 Pin Latch]
  62   1              // [P0 - Port 0 Pin Latch]$
  63   1      
  64   1              // $[P0MDOUT - Port 0 Output Mode]
  65   1              // [P0MDOUT - Port 0 Output Mode]$
  66   1      
  67   1              // $[P0MDIN - Port 0 Input Mode]
  68   1              // [P0MDIN - Port 0 Input Mode]$
  69   1      
  70   1              // $[P0SKIP - Port 0 Skip]
  71   1              /*
  72   1              // B0 (Port 0 Bit 0 Skip) = NOT_SKIPPED (P0.0 pin is not skipped by the
  73   1              //     crossbar.)
  74   1              // B1 (Port 0 Bit 1 Skip) = SKIPPED (P0.1 pin is skipped by the
  75   1              //     crossbar.)
  76   1              // B2 (Port 0 Bit 2 Skip) = SKIPPED (P0.2 pin is skipped by the
  77   1              //     crossbar.)
  78   1              // B3 (Port 0 Bit 3 Skip) = SKIPPED (P0.3 pin is skipped by the
  79   1              //     crossbar.)
  80   1              // B4 (Port 0 Bit 4 Skip) = SKIPPED (P0.4 pin is skipped by the
  81   1              //     crossbar.)
  82   1              // B5 (Port 0 Bit 5 Skip) = SKIPPED (P0.5 pin is skipped by the
  83   1              //     crossbar.)
  84   1              // B6 (Port 0 Bit 6 Skip) = SKIPPED (P0.6 pin is skipped by the
  85   1              //     crossbar.)
  86   1              // B7 (Port 0 Bit 7 Skip) = SKIPPED (P0.7 pin is skipped by the
  87   1              //     crossbar.)
  88   1              */
  89   1              P0SKIP = P0SKIP_B0__NOT_SKIPPED | P0SKIP_B1__SKIPPED | P0SKIP_B2__SKIPPED
  90   1                       | P0SKIP_B3__SKIPPED | P0SKIP_B4__SKIPPED | P0SKIP_B5__SKIPPED
  91   1                       | P0SKIP_B6__SKIPPED | P0SKIP_B7__SKIPPED;
  92   1              // [P0SKIP - Port 0 Skip]$
  93   1      
  94   1              // $[P0MASK - Port 0 Mask]
  95   1              // [P0MASK - Port 0 Mask]$
  96   1      
  97   1              // $[P0MAT - Port 0 Match]
  98   1              // [P0MAT - Port 0 Match]$
  99   1      
 100   1      
 101   1      }
 102          
 103          //================================================================================
 104          // PORTS_1_enter_DefaultMode_from_RESET
 105          //================================================================================
 106          extern void PORTS_1_enter_DefaultMode_from_RESET(void) {
 107   1              // $[P1 - Port 1 Pin Latch]
 108   1              /*
 109   1              // B0 (Port 1 Bit 0 Latch) = HIGH (P1.0 is high. Set P1.0 to drive or
 110   1              //     float high.)
 111   1              // B1 (Port 1 Bit 1 Latch) = HIGH (P1.1 is high. Set P1.1 to drive or
 112   1              //     float high.)
 113   1              // B2 (Port 1 Bit 2 Latch) = HIGH (P1.2 is high. Set P1.2 to drive or
 114   1              //     float high.)
C51 COMPILER V9.53.0.0   INITDEVICE                                                        06/07/2018 11:22:25 PAGE 3   

 115   1              // B3 (Port 1 Bit 3 Latch) = HIGH (P1.3 is high. Set P1.3 to drive or
 116   1              //     float high.)
 117   1              // B4 (Port 1 Bit 4 Latch) = HIGH (P1.4 is high. Set P1.4 to drive or
 118   1              //     float high.)
 119   1              // B5 (Port 1 Bit 5 Latch) = HIGH (P1.5 is high. Set P1.5 to drive or
 120   1              //     float high.)
 121   1              // B6 (Port 1 Bit 6 Latch) = LOW (P1.6 is low. Set P1.6 to drive low.)
 122   1              // B7 (Port 1 Bit 7 Latch) = HIGH (P1.7 is high. Set P1.7 to drive or
 123   1              //     float high.)
 124   1              */
 125   1              P1 = P1_B0__HIGH | P1_B1__HIGH | P1_B2__HIGH | P1_B3__HIGH | P1_B4__HIGH
 126   1                       | P1_B5__HIGH | P1_B6__LOW | P1_B7__HIGH;
 127   1              // [P1 - Port 1 Pin Latch]$
 128   1      
 129   1              // $[P1MDOUT - Port 1 Output Mode]
 130   1              /*
 131   1              // B0 (Port 1 Bit 0 Output Mode) = PUSH_PULL (P1.0 output is push-pull.)
 132   1              // B1 (Port 1 Bit 1 Output Mode) = PUSH_PULL (P1.1 output is push-pull.)
 133   1              // B2 (Port 1 Bit 2 Output Mode) = PUSH_PULL (P1.2 output is push-pull.)
 134   1              // B3 (Port 1 Bit 3 Output Mode) = PUSH_PULL (P1.3 output is push-pull.)
 135   1              // B4 (Port 1 Bit 4 Output Mode) = PUSH_PULL (P1.4 output is push-pull.)
 136   1              // B5 (Port 1 Bit 5 Output Mode) = PUSH_PULL (P1.5 output is push-pull.)
 137   1              // B6 (Port 1 Bit 6 Output Mode) = PUSH_PULL (P1.6 output is push-pull.)
 138   1              // B7 (Port 1 Bit 7 Output Mode) = OPEN_DRAIN (P1.7 output is open-
 139   1              //     drain.)
 140   1              */
 141   1              P1MDOUT = P1MDOUT_B0__PUSH_PULL | P1MDOUT_B1__PUSH_PULL | P1MDOUT_B2__PUSH_PULL
 142   1                       | P1MDOUT_B3__PUSH_PULL | P1MDOUT_B4__PUSH_PULL | P1MDOUT_B5__PUSH_PULL
 143   1                       | P1MDOUT_B6__PUSH_PULL | P1MDOUT_B7__OPEN_DRAIN;
 144   1              // [P1MDOUT - Port 1 Output Mode]$
 145   1      
 146   1              // $[P1MDIN - Port 1 Input Mode]
 147   1              // [P1MDIN - Port 1 Input Mode]$
 148   1      
 149   1              // $[P1SKIP - Port 1 Skip]
 150   1              /*
 151   1              // B0 (Port 1 Bit 0 Skip) = SKIPPED (P1.0 pin is skipped by the
 152   1              //     crossbar.)
 153   1              // B1 (Port 1 Bit 1 Skip) = SKIPPED (P1.1 pin is skipped by the
 154   1              //     crossbar.)
 155   1              // B2 (Port 1 Bit 2 Skip) = SKIPPED (P1.2 pin is skipped by the
 156   1              //     crossbar.)
 157   1              // B3 (Port 1 Bit 3 Skip) = NOT_SKIPPED (P1.3 pin is not skipped by the
 158   1              //     crossbar.)
 159   1              // B4 (Port 1 Bit 4 Skip) = NOT_SKIPPED (P1.4 pin is not skipped by the
 160   1              //     crossbar.)
 161   1              // B5 (Port 1 Bit 5 Skip) = NOT_SKIPPED (P1.5 pin is not skipped by the
 162   1              //     crossbar.)
 163   1              // B6 (Port 1 Bit 6 Skip) = NOT_SKIPPED (P1.6 pin is not skipped by the
 164   1              //     crossbar.)
 165   1              // B7 (Port 1 Bit 7 Skip) = NOT_SKIPPED (P1.7 pin is not skipped by the
 166   1              //     crossbar.)
 167   1              */
 168   1              P1SKIP = P1SKIP_B0__SKIPPED | P1SKIP_B1__SKIPPED | P1SKIP_B2__SKIPPED
 169   1                       | P1SKIP_B3__NOT_SKIPPED | P1SKIP_B4__NOT_SKIPPED | P1SKIP_B5__NOT_SKIPPED
 170   1                       | P1SKIP_B6__NOT_SKIPPED | P1SKIP_B7__NOT_SKIPPED;
 171   1              // [P1SKIP - Port 1 Skip]$
 172   1      
 173   1              // $[P1MASK - Port 1 Mask]
 174   1              // [P1MASK - Port 1 Mask]$
 175   1      
 176   1              // $[P1MAT - Port 1 Match]
 177   1              // [P1MAT - Port 1 Match]$
C51 COMPILER V9.53.0.0   INITDEVICE                                                        06/07/2018 11:22:25 PAGE 4   

 178   1      
 179   1      
 180   1      }
 181          
 182          //================================================================================
 183          // PBCFG_0_enter_DefaultMode_from_RESET
 184          //================================================================================
 185          extern void PBCFG_0_enter_DefaultMode_from_RESET(void) {
 186   1              // $[XBR2 - Port I/O Crossbar 2]
 187   1              /*
 188   1              // WEAKPUD (Port I/O Weak Pullup Disable) = PULL_UPS_ENABLED (Weak
 189   1              //     Pullups enabled (except for Ports whose I/O are configured for analog
 190   1              //     mode).)
 191   1              // XBARE (Crossbar Enable) = ENABLED (Crossbar enabled.)
 192   1              */
 193   1              XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED;
 194   1              // [XBR2 - Port I/O Crossbar 2]$
 195   1      
 196   1              // $[PRTDRV - Port Drive Strength]
 197   1              // [PRTDRV - Port Drive Strength]$
 198   1      
 199   1              // $[XBR0 - Port I/O Crossbar 0]
 200   1              // [XBR0 - Port I/O Crossbar 0]$
 201   1      
 202   1              // $[XBR1 - Port I/O Crossbar 1]
 203   1              /*
 204   1              // PCA0ME (PCA Module I/O Enable) = CEX0 (CEX0 routed to Port pin.)
 205   1              // ECIE (PCA0 External Counter Input Enable) = DISABLED (ECI unavailable
 206   1              //     at Port pin.)
 207   1              // T0E (T0 Enable) = DISABLED (T0 unavailable at Port pin.)
 208   1              // T1E (T1 Enable) = DISABLED (T1 unavailable at Port pin.)
 209   1              // T2E (T2 Enable) = DISABLED (T2 unavailable at Port pin.)
 210   1              */
 211   1              XBR1 = XBR1_PCA0ME__CEX0 | XBR1_ECIE__DISABLED | XBR1_T0E__DISABLED
 212   1                       | XBR1_T1E__DISABLED | XBR1_T2E__DISABLED;
 213   1              // [XBR1 - Port I/O Crossbar 1]$
 214   1      
 215   1      
 216   1      }
 217          
 218          //================================================================================
 219          // CLOCK_0_enter_DefaultMode_from_RESET
 220          //================================================================================
 221          extern void CLOCK_0_enter_DefaultMode_from_RESET(void) {
 222   1              // $[CLKSEL - Clock Select]
 223   1              /*
 224   1              // CLKSL (Clock Source Select) = HFOSC (Clock derived from the Internal
 225   1              //     High-Frequency Oscillator.)
 226   1              // CLKDIV (Clock Source Divider) = SYSCLK_DIV_1 (SYSCLK is equal to
 227   1              //     selected clock source divided by 1.)
 228   1              */
 229   1              CLKSEL = CLKSEL_CLKSL__HFOSC | CLKSEL_CLKDIV__SYSCLK_DIV_1;
 230   1              // [CLKSEL - Clock Select]$
 231   1      
 232   1      
 233   1      }
 234          
 235          //================================================================================
 236          // TIMER01_0_enter_DefaultMode_from_RESET
 237          //================================================================================
 238          extern void TIMER01_0_enter_DefaultMode_from_RESET(void) {
 239   1              // $[Timer Initialization]
 240   1              //Save Timer Configuration
C51 COMPILER V9.53.0.0   INITDEVICE                                                        06/07/2018 11:22:25 PAGE 5   

 241   1              uint8_t TCON_save;
 242   1              TCON_save = TCON;
 243   1              //Stop Timers
 244   1              TCON &= ~TCON_TR0__BMASK & ~TCON_TR1__BMASK;
 245   1      
 246   1              // [Timer Initialization]$
 247   1      
 248   1              // $[TH0 - Timer 0 High Byte]
 249   1              /*
 250   1              // TH0 (Timer 0 High Byte) = 0x0B
 251   1              */
 252   1              TH0 = (0x0B << TH0_TH0__SHIFT);
 253   1              // [TH0 - Timer 0 High Byte]$
 254   1      
 255   1              // $[TL0 - Timer 0 Low Byte]
 256   1              /*
 257   1              // TL0 (Timer 0 Low Byte) = 0xD7
 258   1              */
 259   1              TL0 = (0xD7 << TL0_TL0__SHIFT);
 260   1              // [TL0 - Timer 0 Low Byte]$
 261   1      
 262   1              // $[TH1 - Timer 1 High Byte]
 263   1              /*
 264   1              // TH1 (Timer 1 High Byte) = 0x34
 265   1              */
 266   1              TH1 = (0x34 << TH1_TH1__SHIFT);
 267   1              // [TH1 - Timer 1 High Byte]$
 268   1      
 269   1              // $[TL1 - Timer 1 Low Byte]
 270   1              // [TL1 - Timer 1 Low Byte]$
 271   1      
 272   1              // $[Timer Restoration]
 273   1              //Restore Timer Configuration
 274   1              TCON |= (TCON_save & TCON_TR0__BMASK) | (TCON_save & TCON_TR1__BMASK);
 275   1      
 276   1              // [Timer Restoration]$
 277   1      
 278   1      
 279   1      }
 280          
 281          //================================================================================
 282          // TIMER16_2_enter_DefaultMode_from_RESET
 283          //================================================================================
 284          extern void TIMER16_2_enter_DefaultMode_from_RESET(void) {
 285   1              // $[Timer Initialization]
 286   1              // Save Timer Configuration
 287   1              uint8_t TMR2CN0_TR2_save;
 288   1              TMR2CN0_TR2_save = TMR2CN0 & TMR2CN0_TR2__BMASK;
 289   1              // Stop Timer
 290   1              TMR2CN0 &= ~(TMR2CN0_TR2__BMASK);
 291   1              // [Timer Initialization]$
 292   1      
 293   1              // $[TMR2CN0 - Timer 2 Control]
 294   1              // [TMR2CN0 - Timer 2 Control]$
 295   1      
 296   1              // $[TMR2H - Timer 2 High Byte]
 297   1              /*
 298   1              // TMR2H (Timer 2 High Byte) = 0x40
 299   1              */
 300   1              TMR2H = (0x40 << TMR2H_TMR2H__SHIFT);
 301   1              // [TMR2H - Timer 2 High Byte]$
 302   1      
 303   1              // $[TMR2L - Timer 2 Low Byte]
C51 COMPILER V9.53.0.0   INITDEVICE                                                        06/07/2018 11:22:25 PAGE 6   

 304   1              /*
 305   1              // TMR2L (Timer 2 Low Byte) = 0x98
 306   1              */
 307   1              TMR2L = (0x98 << TMR2L_TMR2L__SHIFT);
 308   1              // [TMR2L - Timer 2 Low Byte]$
 309   1      
 310   1              // $[TMR2RLH - Timer 2 Reload High Byte]
 311   1              /*
 312   1              // TMR2RLH (Timer 2 Reload High Byte) = 0x40
 313   1              */
 314   1              TMR2RLH = (0x40 << TMR2RLH_TMR2RLH__SHIFT);
 315   1              // [TMR2RLH - Timer 2 Reload High Byte]$
 316   1      
 317   1              // $[TMR2RLL - Timer 2 Reload Low Byte]
 318   1              /*
 319   1              // TMR2RLL (Timer 2 Reload Low Byte) = 0x98
 320   1              */
 321   1              TMR2RLL = (0x98 << TMR2RLL_TMR2RLL__SHIFT);
 322   1              // [TMR2RLL - Timer 2 Reload Low Byte]$
 323   1      
 324   1              // $[TMR2CN0]
 325   1              /*
 326   1              // TR2 (Timer 2 Run Control) = RUN (Start Timer 2 running.)
 327   1              */
 328   1              TMR2CN0 |= TMR2CN0_TR2__RUN;
 329   1              // [TMR2CN0]$
 330   1      
 331   1              // $[Timer Restoration]
 332   1              // Restore Timer Configuration
 333   1              TMR2CN0 |= TMR2CN0_TR2_save;
 334   1              // [Timer Restoration]$
 335   1      
 336   1      
 337   1      }
 338          
 339          //================================================================================
 340          // TIMER_SETUP_0_enter_DefaultMode_from_RESET
 341          //================================================================================
 342          extern void TIMER_SETUP_0_enter_DefaultMode_from_RESET(void) {
 343   1              // $[CKCON0 - Clock Control 0]
 344   1              /*
 345   1              // SCA (Timer 0/1 Prescale) = SYSCLK_DIV_12 (System clock divided by 12.)
 346   1              // T0M (Timer 0 Clock Select) = SYSCLK (Counter/Timer 0 uses the system
 347   1              //     clock.)
 348   1              // T2MH (Timer 2 High Byte Clock Select) = EXTERNAL_CLOCK (Timer 2 high
 349   1              //     byte uses the clock defined by T2XCLK in TMR2CN0.)
 350   1              // T2ML (Timer 2 Low Byte Clock Select) = SYSCLK (Timer 2 low byte uses
 351   1              //     the system clock.)
 352   1              // T3MH (Timer 3 High Byte Clock Select) = EXTERNAL_CLOCK (Timer 3 high
 353   1              //     byte uses the clock defined by T3XCLK in TMR3CN0.)
 354   1              // T3ML (Timer 3 Low Byte Clock Select) = EXTERNAL_CLOCK (Timer 3 low
 355   1              //     byte uses the clock defined by T3XCLK in TMR3CN0.)
 356   1              // T1M (Timer 1 Clock Select) = PRESCALE (Timer 1 uses the clock defined
 357   1              //     by the prescale field, SCA.)
 358   1              */
 359   1              CKCON0 = CKCON0_SCA__SYSCLK_DIV_12 | CKCON0_T0M__SYSCLK | CKCON0_T2MH__EXTERNAL_CLOCK
 360   1                       | CKCON0_T2ML__SYSCLK | CKCON0_T3MH__EXTERNAL_CLOCK | CKCON0_T3ML__EXTERNAL_CLOCK
 361   1                       | CKCON0_T1M__PRESCALE;
 362   1              // [CKCON0 - Clock Control 0]$
 363   1      
 364   1              // $[TMOD - Timer 0/1 Mode]
 365   1              /*
 366   1              // T0M (Timer 0 Mode Select) = MODE2 (Mode 2, 8-bit Counter/Timer with
C51 COMPILER V9.53.0.0   INITDEVICE                                                        06/07/2018 11:22:25 PAGE 7   

 367   1              //     Auto-Reload)
 368   1              // T1M (Timer 1 Mode Select) = MODE2 (Mode 2, 8-bit Counter/Timer with
 369   1              //     Auto-Reload)
 370   1              // CT0 (Counter/Timer 0 Select) = TIMER (Timer Mode. Timer 0 increments
 371   1              //     on the clock defined by T0M in the CKCON0 register.)
 372   1              // GATE0 (Timer 0 Gate Control) = DISABLED (Timer 0 enabled when TR0 = 1
 373   1              //     irrespective of INT0 logic level.)
 374   1              // CT1 (Counter/Timer 1 Select) = TIMER (Timer Mode. Timer 1 increments
 375   1              //     on the clock defined by T1M in the CKCON0 register.)
 376   1              // GATE1 (Timer 1 Gate Control) = DISABLED (Timer 1 enabled when TR1 = 1
 377   1              //     irrespective of INT1 logic level.)
 378   1              */
 379   1              TMOD = TMOD_T0M__MODE2 | TMOD_T1M__MODE2 | TMOD_CT0__TIMER | TMOD_GATE0__DISABLED
 380   1                       | TMOD_CT1__TIMER | TMOD_GATE1__DISABLED;
 381   1              // [TMOD - Timer 0/1 Mode]$
 382   1      
 383   1              // $[TCON - Timer 0/1 Control]
 384   1              /*
 385   1              // TR0 (Timer 0 Run Control) = RUN (Start Timer 0 running.)
 386   1              // TR1 (Timer 1 Run Control) = RUN (Start Timer 1 running.)
 387   1              */
 388   1              TCON |= TCON_TR0__RUN | TCON_TR1__RUN;
 389   1              // [TCON - Timer 0/1 Control]$
 390   1      
 391   1      
 392   1      }
 393          
 394          //================================================================================
 395          // PCA_0_enter_DefaultMode_from_RESET
 396          //================================================================================
 397          extern void PCA_0_enter_DefaultMode_from_RESET(void) {
 398   1              // $[PCA Off]
 399   1              PCA0CN0_CR = PCA0CN0_CR__STOP;
 400   1              // [PCA Off]$
 401   1              // $[PCA0MD - PCA Mode]
 402   1              /*
 403   1              // CIDL (PCA Counter/Timer Idle Control) = NORMAL (PCA continues to
 404   1              //     function normally while the system controller is in Idle Mode.)
 405   1              // ECF (PCA Counter/Timer Overflow Interrupt Enable) = OVF_INT_DISABLED
 406   1              //     (Disable the CF interrupt.)
 407   1              // CPS (PCA Counter/Timer Pulse Select) = T0_OVERFLOW (Timer 0 overflow.)
 408   1              */
 409   1              PCA0MD = PCA0MD_CIDL__NORMAL | PCA0MD_ECF__OVF_INT_DISABLED | PCA0MD_CPS__T0_OVERFLOW;
 410   1              // [PCA0MD - PCA Mode]$
 411   1      
 412   1              // $[PCA0CENT - PCA Center Alignment Enable]
 413   1              /*
 414   1              // CEX0CEN (CEX0 Center Alignment Enable) = CENTER (Center-aligned.)
 415   1              // CEX1CEN (CEX1 Center Alignment Enable) = EDGE (Edge-aligned.)
 416   1              // CEX2CEN (CEX2 Center Alignment Enable) = EDGE (Edge-aligned.)
 417   1              */
 418   1              PCA0CENT = PCA0CENT_CEX0CEN__CENTER | PCA0CENT_CEX1CEN__EDGE | PCA0CENT_CEX2CEN__EDGE;
 419   1              // [PCA0CENT - PCA Center Alignment Enable]$
 420   1      
 421   1              // $[PCA0CLR - PCA Comparator Clear Control]
 422   1              // [PCA0CLR - PCA Comparator Clear Control]$
 423   1      
 424   1              // $[PCA0L - PCA Counter/Timer Low Byte]
 425   1              // [PCA0L - PCA Counter/Timer Low Byte]$
 426   1      
 427   1              // $[PCA0H - PCA Counter/Timer High Byte]
 428   1              // [PCA0H - PCA Counter/Timer High Byte]$
 429   1      
C51 COMPILER V9.53.0.0   INITDEVICE                                                        06/07/2018 11:22:25 PAGE 8   

 430   1              // $[PCA0POL - PCA Output Polarity]
 431   1              // [PCA0POL - PCA Output Polarity]$
 432   1      
 433   1              // $[PCA0PWM - PCA PWM Configuration]
 434   1              // [PCA0PWM - PCA PWM Configuration]$
 435   1      
 436   1              // $[PCA On]
 437   1              PCA0CN0_CR = PCA0CN0_CR__RUN;
 438   1              // [PCA On]$
 439   1      
 440   1      
 441   1      }
 442          
 443          //================================================================================
 444          // PCACH_0_enter_DefaultMode_from_RESET
 445          //================================================================================
 446          extern void PCACH_0_enter_DefaultMode_from_RESET(void) {
 447   1              // $[PCA0 Settings Save]
 448   1              uint8_t PCA0CN0_CR_save;
 449   1              uint8_t PCA0PWM_ARSEL_save;
 450   1              PCA0CN0_CR_save = PCA0CN0 & PCA0CN0_CR__BMASK;
 451   1              PCA0PWM_ARSEL_save = PCA0PWM & PCA0PWM_ARSEL__BMASK;
 452   1              // Turn PCA0 off while updating PCACH0
 453   1              PCA0CN0 &= ~PCA0CN0_CR__BMASK;
 454   1              // Select Capture/Compare register)
 455   1              PCA0PWM &= ~PCA0PWM_ARSEL__BMASK;
 456   1              // [PCA0 Settings Save]$
 457   1      
 458   1              // $[PCA0CPM0 - PCA Channel 0 Capture/Compare Mode]
 459   1              /*
 460   1              // CAPN (Channel 0 Capture Negative Function Enable) = ENABLED (Enable
 461   1              //     negative edge capture.)
 462   1              // ECCF (Channel 0 Capture/Compare Flag Interrupt Enable) = ENABLED
 463   1              //     (Enable a Capture/Compare Flag interrupt request when CCF0 is set.)
 464   1              // MAT (Channel 0 Match Function Enable) = DISABLED (Disable match
 465   1              //     function.)
 466   1              // PWM16 (Channel 0 16-bit Pulse Width Modulation Enable) = 8_BIT (8 to
 467   1              //     11-bit PWM selected.)
 468   1              // CAPP (Channel 0 Capture Positive Function Enable) = DISABLED (Disable
 469   1              //     positive edge capture.)
 470   1              // ECOM (Channel 0 Comparator Function Enable) = DISABLED (Disable
 471   1              //     comparator function.)
 472   1              // PWM (Channel 0 Pulse Width Modulation Mode Enable) = DISABLED (Disable
 473   1              //     PWM function.)
 474   1              // TOG (Channel 0 Toggle Function Enable) = DISABLED (Disable toggle
 475   1              //     function.)
 476   1              */
 477   1              PCA0CPM0 = PCA0CPM0_CAPN__ENABLED | PCA0CPM0_ECCF__ENABLED | PCA0CPM0_MAT__DISABLED
 478   1                       | PCA0CPM0_PWM16__8_BIT | PCA0CPM0_CAPP__ENABLED | PCA0CPM0_ECOM__DISABLED
 479   1                       | PCA0CPM0_PWM__DISABLED | PCA0CPM0_TOG__DISABLED;
 480   1              // [PCA0CPM0 - PCA Channel 0 Capture/Compare Mode]$
 481   1      
 482   1              // $[PCA0CPL0 - PCA Channel 0 Capture Module Low Byte]
 483   1              // [PCA0CPL0 - PCA Channel 0 Capture Module Low Byte]$
 484   1      
 485   1              // $[PCA0CPH0 - PCA Channel 0 Capture Module High Byte]
 486   1              // [PCA0CPH0 - PCA Channel 0 Capture Module High Byte]$
 487   1      
 488   1              // $[Auto-reload]
 489   1              // [Auto-reload]$
 490   1      
 491   1              // $[PCA0 Settings Restore]
 492   1              PCA0CN0 |= PCA0CN0_CR_save;
C51 COMPILER V9.53.0.0   INITDEVICE                                                        06/07/2018 11:22:25 PAGE 9   

 493   1              PCA0PWM |= PCA0PWM_ARSEL_save;
 494   1              // [PCA0 Settings Restore]$
 495   1      
 496   1      
 497   1      }
 498          
 499          //================================================================================
 500          // INTERRUPT_0_enter_DefaultMode_from_RESET
 501          //================================================================================
 502          extern void INTERRUPT_0_enter_DefaultMode_from_RESET(void) {
 503   1              // $[EIE1 - Extended Interrupt Enable 1]
 504   1              /*
 505   1              // EADC0 (ADC0 Conversion Complete Interrupt Enable) = DISABLED (Disable
 506   1              //     ADC0 Conversion Complete interrupt.)
 507   1              // EWADC0 (ADC0 Window Comparison Interrupt Enable) = DISABLED (Disable
 508   1              //     ADC0 Window Comparison interrupt.)
 509   1              // ECP0 (Comparator0 (CP0) Interrupt Enable) = DISABLED (Disable CP0
 510   1              //     interrupts.)
 511   1              // ECP1 (Comparator1 (CP1) Interrupt Enable) = DISABLED (Disable CP1
 512   1              //     interrupts.)
 513   1              // EMAT (Port Match Interrupts Enable) = DISABLED (Disable all Port Match
 514   1              //     interrupts.)
 515   1              // EPCA0 (Programmable Counter Array (PCA0) Interrupt Enable) = ENABLED
 516   1              //     (Enable interrupt requests generated by PCA0.)
 517   1              // ESMB0 (SMBus (SMB0) Interrupt Enable) = DISABLED (Disable all SMB0
 518   1              //     interrupts.)
 519   1              // ET3 (Timer 3 Interrupt Enable) = ENABLED (Enable interrupt requests
 520   1              //     generated by the TF3L or TF3H flags.)
 521   1              */
 522   1              EIE1 = EIE1_EADC0__DISABLED | EIE1_EWADC0__DISABLED | EIE1_ECP0__DISABLED
 523   1                       | EIE1_ECP1__DISABLED | EIE1_EMAT__DISABLED | EIE1_EPCA0__ENABLED
 524   1                       | EIE1_ESMB0__DISABLED | EIE1_ET3__ENABLED;
 525   1              // [EIE1 - Extended Interrupt Enable 1]$
 526   1      
 527   1              // $[EIP1 - Extended Interrupt Priority 1]
 528   1              /*
 529   1              // PADC0 (ADC0 Conversion Complete Interrupt Priority Control) = LOW
 530   1              //     (ADC0 Conversion Complete interrupt set to low priority level.)
 531   1              // PWADC0 (ADC0 Window Comparator Interrupt Priority Control) = LOW (ADC0
 532   1              //     Window interrupt set to low priority level.)
 533   1              // PCP0 (Comparator0 (CP0) Interrupt Priority Control) = LOW (CP0
 534   1              //     interrupt set to low priority level.)
 535   1              // PCP1 (Comparator1 (CP1) Interrupt Priority Control) = LOW (CP1
 536   1              //     interrupt set to low priority level.)
 537   1              // PMAT (Port Match Interrupt Priority Control) = LOW (Port Match
 538   1              //     interrupt set to low priority level.)
 539   1              // PPCA0 (Programmable Counter Array (PCA0) Interrupt Priority Control) =
 540   1              //     HIGH (PCA0 interrupt set to high priority level.)
 541   1              // PSMB0 (SMBus (SMB0) Interrupt Priority Control) = LOW (SMB0 interrupt
 542   1              //     set to low priority level.)
 543   1              // PT3 (Timer 3 Interrupt Priority Control) = LOW (Timer 3 interrupts set
 544   1              //     to low priority level.)
 545   1              */
 546   1              EIP1 = EIP1_PADC0__LOW | EIP1_PWADC0__LOW | EIP1_PCP0__LOW | EIP1_PCP1__LOW
 547   1                       | EIP1_PMAT__LOW | EIP1_PPCA0__HIGH | EIP1_PSMB0__LOW | EIP1_PT3__LOW;
 548   1              // [EIP1 - Extended Interrupt Priority 1]$
 549   1      
 550   1              // $[IE - Interrupt Enable]
 551   1              /*
 552   1              // EA (All Interrupts Enable) = ENABLED (Enable each interrupt according
 553   1              //     to its individual mask setting.)
 554   1              // EX0 (External Interrupt 0 Enable) = DISABLED (Disable external
 555   1              //     interrupt 0.)
C51 COMPILER V9.53.0.0   INITDEVICE                                                        06/07/2018 11:22:25 PAGE 10  

 556   1              // EX1 (External Interrupt 1 Enable) = DISABLED (Disable external
 557   1              //     interrupt 1.)
 558   1              // ESPI0 (SPI0 Interrupt Enable) = DISABLED (Disable all SPI0
 559   1              //     interrupts.)
 560   1              // ET0 (Timer 0 Interrupt Enable) = DISABLED (Disable all Timer 0
 561   1              //     interrupt.)
 562   1              // ET1 (Timer 1 Interrupt Enable) = ENABLED (Enable interrupt requests
 563   1              //     generated by the TF1 flag.)
 564   1              // ET2 (Timer 2 Interrupt Enable) = ENABLED (Enable interrupt requests
 565   1              //     generated by the TF2L or TF2H flags.)
 566   1              // ES0 (UART0 Interrupt Enable) = DISABLED (Disable UART0 interrupt.)
 567   1              */
 568   1              IE = IE_EA__ENABLED | IE_EX0__DISABLED | IE_EX1__DISABLED | IE_ESPI0__DISABLED
 569   1                       | IE_ET0__DISABLED | IE_ET1__ENABLED | IE_ET2__ENABLED | IE_ES0__DISABLED;
 570   1              // [IE - Interrupt Enable]$
 571   1      
 572   1              // $[IP - Interrupt Priority]
 573   1              /*
 574   1              // PX0 (External Interrupt 0 Priority Control) = LOW (External Interrupt
 575   1              //     0 set to low priority level.)
 576   1              // PX1 (External Interrupt 1 Priority Control) = LOW (External Interrupt
 577   1              //     1 set to low priority level.)
 578   1              // PSPI0 (Serial Peripheral Interface (SPI0) Interrupt Priority Control)
 579   1              //     = LOW (SPI0 interrupt set to low priority level.)
 580   1              // PT0 (Timer 0 Interrupt Priority Control) = LOW (Timer 0 interrupt set
 581   1              //     to low priority level.)
 582   1              // PT1 (Timer 1 Interrupt Priority Control) = LOW (Timer 1 interrupt set
 583   1              //     to low priority level.)
 584   1              // PT2 (Timer 2 Interrupt Priority Control) = LOW (Timer 2 interrupt set
 585   1              //     to low priority level.)
 586   1              // PS0 (UART0 Interrupt Priority Control) = HIGH (UART0 interrupt set to
 587   1              //     high priority level.)
 588   1              */
 589   1              IP = IP_PX0__LOW | IP_PX1__LOW | IP_PSPI0__LOW | IP_PT0__LOW | IP_PT1__LOW
 590   1                       | IP_PT2__LOW | IP_PS0__HIGH;
 591   1              // [IP - Interrupt Priority]$
 592   1      
 593   1      
 594   1      }
 595          
 596          
 597          extern void TIMER16_3_enter_DefaultMode_from_RESET(void) {
 598   1              // $[Timer Initialization]
 599   1              // Save Timer Configuration
 600   1              uint8_t TMR3CN0_TR3_save;
 601   1              TMR3CN0_TR3_save = TMR3CN0 & TMR3CN0_TR3__BMASK;
 602   1              // Stop Timer
 603   1              TMR3CN0 &= ~(TMR3CN0_TR3__BMASK);
 604   1              // [Timer Initialization]$
 605   1      
 606   1              // $[TMR3CN0 - Timer 3 Control]
 607   1              // [TMR3CN0 - Timer 3 Control]$
 608   1      
 609   1              // $[TMR3H - Timer 3 High Byte]
 610   1              /*
 611   1              // TMR3H (Timer 3 High Byte) = 0xFF
 612   1              */
 613   1              TMR3H = (0xFF << TMR3H_TMR3H__SHIFT);
 614   1              // [TMR3H - Timer 3 High Byte]$
 615   1      
 616   1              // $[TMR3L - Timer 3 Low Byte]
 617   1              /*
 618   1              // TMR3L (Timer 3 Low Byte) = 0x0B
C51 COMPILER V9.53.0.0   INITDEVICE                                                        06/07/2018 11:22:25 PAGE 11  

 619   1              */
 620   1              TMR3L = (0x0B << TMR3L_TMR3L__SHIFT);
 621   1              // [TMR3L - Timer 3 Low Byte]$
 622   1      
 623   1              // $[TMR3RLH - Timer 3 Reload High Byte]
 624   1              /*
 625   1              // TMR3RLH (Timer 3 Reload High Byte) = 0xB0
 626   1              */
 627   1              TMR3RLH = (0xB0 << TMR3RLH_TMR3RLH__SHIFT);
 628   1              // [TMR3RLH - Timer 3 Reload High Byte]$
 629   1      
 630   1              // $[TMR3RLL - Timer 3 Reload Low Byte]
 631   1              /*
 632   1              // TMR3RLL (Timer 3 Reload Low Byte) = 0x3F
 633   1              */
 634   1              TMR3RLL = (0x3F << TMR3RLL_TMR3RLL__SHIFT);
 635   1              // [TMR3RLL - Timer 3 Reload Low Byte]$
 636   1      
 637   1              // $[TMR3CN0]
 638   1              /*
 639   1              // TR3 (Timer 3 Run Control) = RUN (Start Timer 3 running.)
 640   1              */
 641   1              TMR3CN0 |= TMR3CN0_TR3__RUN;
 642   1              // [TMR3CN0]$
 643   1      
 644   1              // $[Timer Restoration]
 645   1              // Restore Timer Configuration
 646   1              TMR3CN0 |= TMR3CN0_TR3_save;
 647   1              // [Timer Restoration]$
 648   1      
 649   1      
 650   1      }
 651          
 652          extern void LFOSC_0_enter_DefaultMode_from_RESET(void) {
 653   1              // $[LFO0CN - Low Frequency Oscillator Control]
 654   1              /*
 655   1              // OSCLEN (Internal L-F Oscillator Enable) = ENABLED (Internal L-F
 656   1              //     Oscillator Enabled.)
 657   1              */
 658   1              LFO0CN |= LFO0CN_OSCLEN__ENABLED;
 659   1              // [LFO0CN - Low Frequency Oscillator Control]$
 660   1      
 661   1              // $[Wait for LFOSC Ready]
 662   1              while ((LFO0CN & LFO0CN_OSCLRDY__BMASK) != LFO0CN_OSCLRDY__SET);
 663   1              // [Wait for LFOSC Ready]$
 664   1      
 665   1      
 666   1      }
 667          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    215    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
C51 COMPILER V9.53.0.0   INITDEVICE                                                        06/07/2018 11:22:25 PAGE 12  

END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
