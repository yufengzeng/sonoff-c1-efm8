C51 COMPILER V9.53.0.0   EFM8BB1_PCA_CAPTUREINPUT                                          06/07/2018 16:33:02 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE EFM8BB1_PCA_CAPTUREINPUT
OBJECT MODULE PLACED IN .\src\EFM8BB1_PCA_CaptureInput.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v3\developer\toolchains\keil_8051\9.53\BIN\C51.exe D:\VM\share\EFM8
                    -_PROJ\SONOFF-C1-EFM8\src\EFM8BB1_PCA_CaptureInput.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(
                    -3) OPTIMIZE(9,SPEED) DEFINE(NDEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(D:/VM/share/EFM8_PROJ/SONOFF-C1-EFM8/inc;C:/Si
                    -liconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/shared/si8051Base;C:/SiliconLabs/SimplicityStudio/v3/deve
                    -loper/sdks/si8051/v3//Device/EFM8BB1;C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/EFM8BB1/inc) RE
                    -GFILE(Sonoff-C1-EFM8.ORC) PRINT(.\src\EFM8BB1_PCA_CaptureInput.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\EFM8
                    -BB1_PCA_CaptureInput.OBJ)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // EFM8BB1_PCA_CaptureInput.c
   3          //-----------------------------------------------------------------------------
   4          // Copyright 2014 Silicon Laboratories, Inc.
   5          // http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   6          //
   7          // Program Description:
   8          //
   9          // This program uses the PCA's capture mode to time events on an input pin.
  10          // The difference between subsequent captures is calculated and stored in
  11          // memory.
  12          //
  13          // In this example, PCA Module 0 is used to capture rising edges of an
  14          // incoming digital waveform, and the crossbar is configured to receive the
  15          // CEX0 pin on on P1.2. The PCA is configured to clock once every 10 us.
  16          //
  17          // Timer2 overflows are used to toggle pin P1.3 at an overflow rate specified
  18          // by the definition T2_RELOAD_CLOCKS. This signal at P1.3 is provided simply
  19          // as a test method for the code.
  20          //
  21          // The PCA will capture rising edges on the CEX0 pin, and interrupt the
  22          // processor.  Software subtracts the previous capture value from the most
  23          // recent capture value to set the "captured_clocks" variable.
  24          //
  25          // The PCA time base in this example is configured to use Timer 0, overflowing
  26          // every 10 us. The PCA clock rate will determine the maximum time between
  27          // edges that can be reliably detected (this is equal to 65535 * the PCA clock).
  28          //
  29          // The time range that can be measured using this example is 10us (MIN) to
  30          // 655.350 ms (MAX) when the clocks are set up as they are in this example.
  31          // The precision is limited to the PCA clock rate (in this example, 10 us).
  32          // Using different PCA clock sources or a different processor clock will allow
  33          // for different time capture ranges or levels of precision.
  34          //
  35          //    How "Capture Mode" Works:
  36          //
  37          //    The PCA's Capture Mode works by making a copy of the current PCA timer
  38          //    value (PCA0) into the capture/compare register for the module (PCA0CPn).
  39          //    The module can be configured to capture rising edges, falling edges, or
  40          //    both rising and falling edges.  When a capture occurs, the CCFn flag is
  41          //    set, and an interrupt is (optionally) generated by the PCA module.
  42          //
  43          //    To detect an edge (and not reject it as noise) the new logic level must
  44          //    be present at the pin for at least two SYSCLK cycles.
  45          //
  46          //    With a constantly-running PCA timer, the time between two edges on a
  47          //    signal can be accurately measured to within 1 PCA clock cycle.
  48          //    Multiple PCA channels can be used in capture mode to measure timing
  49          //    between different signals.
  50          //
C51 COMPILER V9.53.0.0   EFM8BB1_PCA_CAPTUREINPUT                                          06/07/2018 16:33:02 PAGE 2   

  51          // Resources:
  52          //   SYSCLK - 24.5 MHz HFOSC / 1
  53          //   PCA    - Capture CEX0 positive edge
  54          //   Timer0 - PCA time base
  55          //   Timer2 - Test output
  56          //   P0.0   - Display enable
  57          //   P1.2   - PCA CEX0
  58          //   P1.3   - Timer2 test output
  59          //
  60          //-----------------------------------------------------------------------------
  61          // How To Test: EFM8BB1 STK
  62          //-----------------------------------------------------------------------------
  63          // 1) Short P1.2 and P1.3 together
  64          // 2) Place the switch in "AEM" mode.
  65          // 3) Connect the EFM8BB1 STK board to a PC using a mini USB cable.
  66          // 4) Compile and download code to the EFM8BB1 STK board.
  67          //    In Simplicity Studio IDE, select Run -> Debug from the menu bar,
  68          //    click the Debug button in the quick menu, or press F11.
  69          // 5) Set a breakpoint in the PCA0_ISR function.
  70          // 6) Run the code.
  71          //    In Simplicity Studio IDE, select Run -> Resume from the menu bar,
  72          //    click the Resume button in the quick menu, or press F8.
  73          // 7) Verify that the variable "capture_period" is equal to 50 (=500us).
  74          //
  75          // Alternately:
  76          //
  77          // 1) Run a bench signal generator into the P1.2 pin.
  78          // 2) Place the switch in "AEM" mode.
  79          // 3) Connect the EFM8BB1 STK board to a PC using a mini USB cable.
  80          // 4) Compile and download code to the EFM8BB1 STK board.
  81          //    In Simplicity Studio IDE, select Run -> Debug from the menu bar,
  82          //    click the Debug button in the quick menu, or press F11.
  83          // 5) Set a breakpoint in the PCA0_ISR function.
  84          // 6) Run the code.
  85          //    In Simplicity Studio IDE, select Run -> Resume from the menu bar,
  86          //    click the Resume button in the quick menu, or press F8.
  87          // 7) Verify that the variable "capture_period" matches the expected time
  88          //    between rising edges (in units of 10us).
  89          //
  90          //
  91          // Target:         EFM8BB1
  92          // Tool chain:     Generic
  93          //
  94          // Release 0.1 (ST)
  95          //    - Initial Revision
  96          //    - 10 OCT 2014
  97          //
  98          
  99          
 100          
 101          
 102          //-----------------------------------------------------------------------------
 103          // Includes
 104          //-----------------------------------------------------------------------------
 105          #include <SI_EFM8BB1_Register_Enums.h>
 106          #include "InitDevice.h"
 107          #include "logic.h"
 108          #include "wireless_led.h"
 109          #include "wdt_0.h"
 110          #include "userclock.h"
 111          
 112          //-----------------------------------------------------------------------------
 113          // Main Routine
C51 COMPILER V9.53.0.0   EFM8BB1_PCA_CAPTUREINPUT                                          06/07/2018 16:33:02 PAGE 3   

 114          //-----------------------------------------------------------------------------
 115          #define LFOCLK_HZ 10000UL         // LFOSC default frequency, in Hz
 116          #define WDT_TICKS (2000UL)   //  worth of WDT ticks   100*4F6 = 409ms
 117          
 118          
 119          
 120          void main (void)
 121          {
 122   1         uint8_t bflag = 1;
 123   1         enter_DefaultMode_from_RESET();
 124   1         devInit();
 125   1         IE_EA = 1;
 126   1      
 127   1         WDT0_init(WDT0_ticksToInterval(WDT_TICKS), WDT0_LFOSC, WDT0_IDLE_SUSPEND);
 128   1      
 129   1         WDT0_start();
 130   1       
 131   1      
 132   1         while (1)
 133   1         {
 134   2                 WDT0_feed();
 135   2             getClock();
 136   2                 delEvent();
 137   2             delEspKey();  
*** WARNING C206 IN LINE 137 OF D:\VM\share\EFM8_PROJ\SONOFF-C1-EFM8\src\EFM8BB1_PCA_CaptureInput.c: 'delEspKey': missin
             -g function-prototype
 138   2      
 139   2              if(!FClk_1280MS)
 140   2              {
 141   3                  bflag = (bflag == 0);
 142   3                  BUZZER = bflag;
 143   3              }
 144   2         }
 145   1      }
 146          
 147          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     57    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
